package asdf;

import java.io.*;

import javax.swing.text.html.HTMLDocument.HTMLReader.BlockAction;

public class CandidateCode5 {
	public static int[][][] tetrisBlocks;

	public static void main(String args[]) {
		System.out.println(CandidateCode5.requiredTetriminos(3, 3, new int[] { 1, 1, 1, 0, 0, 0, 0, 0, 0 }));

	}

	public static int requiredTetriminos(int input1, int input2, int[] input3) {
		int count = 0;
		int[][] inputArray = new int[input1 + 2][input2 + 2];
		for (int i = 0; i < input1; i++) {
			for (int j = 0; j < input2; j++) {
				inputArray[i][j] = input3[count];
				++count;
			}
		}
		tetrisBlocks = getBlocks();
		return fillblocks(input1, input2, inputArray);
	}

	public static int fillblocks(int length, int breadth, int[][] arrayToFill) {
		int count = 0;
		for (int i = 0; i < length; i++) {
			for (int j = 0; j < breadth; j++) {
				if (arrayToFill[i][j] == 0) {
					count = doProcess(length, breadth, i, j, arrayToFill);
				}
			}
		}
		return count;
	}
	public static int doProcess(int length, int breadth, int i, int j, int[][] arrayToFill) {
		int count=0;
		
		return checkIfFilled(length, breadth, arrayToFill)?count:0;
	}

	/*public static int doProcess(int length, int breadth, int i, int j, int[][] arrayToFill, int count) {
		if (i ==length-1 && j== breadth-1) {
			return checkIfFilled(length, breadth, arrayToFill) ? count : 0;
		}
		for (int k = 0; k < 18; k++) {
			boolean fill = false;
			int[][] newarrayToFill = mergeArrays(length, breadth, i, j, arrayToFill, k);
			if (newarrayToFill == null) {
				if ( !fill) {
					return checkIfFilled(length, breadth, arrayToFill) ? count : 0;}
				else {
					continue;
				}
			} else {
				fill=fill||true;
				arrayToFill = newarrayToFill;
				fill = true;
				if (j == breadth - 1) {
					i = i + 1;
					j = 0;
					
				} else {
					j = j + 1;
				}
				if(i>=length || j >=breadth){
					continue;
				}
				return doProcess(length, breadth, i, j, arrayToFill, count + 1);
			}
		}
		return checkIfFilled(length, breadth, arrayToFill) ? count : 0;
	}*/

	// return null if merge not possible else reutrn the merged array
	public static int[][] mergeArrays(int length, int breadth, int posX, int posY, int[][] inputArray,
			int tetrisBlocksNo) {
		if(posY>=length || posY>=breadth){
			return null;
		}
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				if(posX + i > length || posY + j > breadth){
				}
				if (inputArray[posX + i][posY + j] == 1 && tetrisBlocks[tetrisBlocksNo][i][j] == 1) {
					return null;
				} else {
					inputArray[posX + i][posY + j] = tetrisBlocks[tetrisBlocksNo][i][j];
				}
			}
		}
		return inputArray;
	}

	public static boolean checkIfFilled(int length, int breadth, int[][] array) {
		length = length + 2;
		breadth = breadth + 2;
		for (int i = 0; i < length; i++) {
			for (int j = 0; j < breadth; j++) {
				if (length - 3 > i || breadth - 3 > j) {
					return array[i][j] == 1 ? false : true;
				}
				if (array[i][j] == 0) {
					return false;
				}
			}
		}
		return true;
	}

	public static int[][] rotateRight(int[][] array) {
		int temp = 0;
		for (int x = 0; x < 3; x++) {
			for (int y = 0; y < 3; y++) {
				temp = array[x][y];
				array[x][y] = array[y][3 - 1 - x];
				array[y][3 - 1 - x] = array[3 - 1 - x][3 - 1 - y];
				array[3 - 1 - x][3 - 1 - y] = array[3 - 1 - y][x];
				array[3 - 1 - y][x] = temp;
			}
		}
		return array;
	}

	public static int[][][] getBlocks() {
		int[][][] block = new int[18][][];

		block[0] = new int[][] { { 1, 0, 0 }, { 1, 0, 0 }, { 1, 0, 0 } };
		block[1] = new int[][] { { 1, 1, 1 }, { 0, 0, 0 }, { 0, 0, 0 } };

		block[2] = new int[][] { { 1, 0, 0 }, { 1, 1, 0 }, { 1, 0, 0 } };
		block[3] = new int[][] { { 1, 1, 1 }, { 0, 1, 0 }, { 0, 0, 0 } };

		block[4] = new int[][] { { 1, 1, 0 }, { 1, 1, 0 }, { 0, 0, 0 } };
		block[5] = new int[][] { { 0, 1, 1 }, { 0, 1, 1 }, { 0, 0, 0 } };

		block[6] = new int[][] { { 1, 1, 0 }, { 0, 1, 1 }, { 0, 0, 0 } };
		block[7] = new int[][] { { 0, 1, 0 }, { 1, 1, 0 }, { 1, 0, 0 } };

		block[8] = new int[][] { { 0, 1, 1 }, { 1, 1, 0 }, { 0, 0, 0 } };
		block[9] = new int[][] { { 1, 0, 0 }, { 1, 1, 0 }, { 0, 1, 0 } };

		block[10] = new int[][] { { 1, 0, 0 }, { 1, 0, 0 }, { 1, 1, 0 } };
		block[11] = new int[][] { { 0, 0, 1 }, { 1, 1, 1 }, { 0, 0, 0 } };
		block[12] = new int[][] { { 1, 1, 0 }, { 0, 1, 0 }, { 0, 1, 0 } };
		block[13] = new int[][] { { 1, 1, 0 }, { 1, 0, 0 }, { 1, 0, 0 } };

		block[14] = new int[][] { { 0, 1, 0 }, { 0, 1, 0 }, { 1, 1, 0 } };
		block[15] = new int[][] { { 1, 1, 1 }, { 0, 0, 1 }, { 0, 0, 0 } };
		block[16] = new int[][] { { 1, 1, 0 }, { 1, 0, 0 }, { 1, 0, 0 } };
		block[17] = new int[][] { { 1, 0, 0 }, { 1, 1, 1 }, { 0, 0, 0 } };
/*
		block[0] = new int[][] { { 0, 0, 0 }, { 1, 1, 1 }, { 0, 0, 0 } };
		block[1] = new int[][] { { 0, 1, 0 }, { 0, 1, 0 }, { 0, 1, 0 } };
		// inverted L
		block[2] = new int[][] { { 0, 0, 0 }, { 1, 1, 1 }, { 0, 0, 1 } };
		block[3] = new int[][] { { 0, 1, 0 }, { 0, 1, 0 }, { 1, 1, 0 } };
		block[4] = new int[][] { { 1, 0, 0 }, { 1, 1, 1 }, { 0, 0, 0 } };
		block[5] = new int[][] { { 0, 1, 1 }, { 0, 1, 0 }, { 0, 1, 0 } };

		// L
		block[6] = new int[][] { { 0, 0, 1 }, { 1, 1, 1 }, { 0, 0, 0 } };
		block[7] = new int[][] { { 1, 1, 0 }, { 0, 1, 0 }, { 0, 1, 0 } };
		block[8] = new int[][] { { 0, 0, 0 }, { 1, 1, 1 }, { 1, 0, 0 } };
		block[9] = new int[][] { { 0, 1, 0 }, { 0, 1, 0 }, { 0, 1, 1 } };

		// square
		block[10] = new int[][] { { 1, 1, 0 }, { 1, 1, 0 }, { 0, 0, 0 } };
		block[11] = new int[][] { { 0, 1, 1 }, { 0, 1, 1 }, { 0, 0, 0 } };
		block[12] = new int[][] { { 0, 0, 0 }, { 1, 1, 0 }, { 1, 1, 0 } };
		block[13] = new int[][] { { 0, 0, 0 }, { 0, 1, 1 }, { 0, 1, 1 } };

		// _|_
		block[14] = new int[][] { { 0, 0, 0 }, { 0, 1, 0 }, { 1, 1, 1 } };
		block[15] = new int[][] { { 1, 1, 1 }, { 0, 1, 0 }, { 0, 0, 0 } };
		block[16] = new int[][] { { 1, 0, 0 }, { 1, 1, 0 }, { 1, 0, 0 } };
		block[17] = new int[][] { { 0, 0, 1 }, { 0, 1, 1 }, { 0, 0, 1 } };

		// z
		block[18] = new int[][] { { 1, 1, 0 }, { 0, 1, 1 }, { 0, 0, 0 } };
		block[19] = new int[][] { { 0, 1, 0 }, { 1, 1, 0 }, { 1, 0, 0 } };
		block[20] = new int[][] { { 0, 0, 0 }, { 1, 1, 0 }, { 0, 1, 1 } };
		block[21] = new int[][] { { 0, 0, 1 }, { 0, 1, 1 }, { 0, 1, 0 } };

		// inverted z
		block[22] = new int[][] { { 0, 0, 0 }, { 0, 1, 1 }, { 1, 1, 0 } };
		block[23] = new int[][] { { 0, 1, 0 }, { 0, 1, 1 }, { 0, 0, 1 } };
		block[24] = new int[][] { { 0, 1, 1 }, { 1, 1, 0 }, { 0, 0, 0 } };
		block[25] = new int[][] { { 1, 0, 0 }, { 1, 1, 0 }, { 0, 1, 0 } };*/

		return block;
	}

}
